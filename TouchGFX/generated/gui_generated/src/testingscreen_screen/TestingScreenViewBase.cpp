/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/testingscreen_screen/TestingScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

TestingScreenViewBase::TestingScreenViewBase() :
    buttonCallback(this, &TestingScreenViewBase::buttonCallbackHandler)
{

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    backgroundTiledImage.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND2_ID));
    backgroundTiledImage.setPosition(0, 0, 800, 480);
    backgroundTiledImage.setOffset(0, 0);

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_NAVIGATIONMENUBACKGROUND0_ID));
    tiledImage1.setPosition(50, 240, 700, 240);
    tiledImage1.setAlpha(127);
    tiledImage1.setOffset(0, 0);

    stopTestingButton.setXY(315, 155);
    stopTestingButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    stopTestingButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID57));
    stopTestingButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    stopTestingButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    stopTestingButton.setAction(buttonCallback);

    pauseTestingButton.setXY(315, 90);
    pauseTestingButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    pauseTestingButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID58));
    pauseTestingButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    pauseTestingButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    pauseTestingButton.setAction(buttonCallback);

    runTestingButton.setXY(315, 25);
    runTestingButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    runTestingButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID56));
    runTestingButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    runTestingButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    runTestingButton.setAction(buttonCallback);

    textOutputScrollableContainer.setPosition(50, 240, 700, 240);
    textOutputScrollableContainer.enableHorizontalScroll(false);
    textOutputScrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    textOutput.setPosition(0, 0, 700, 1000);
    textOutput.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 253, 253));
    textOutput.setLinespacing(1);
    Unicode::snprintf(textOutputBuffer, TEXTOUTPUT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID53).getText());
    textOutput.setWildcard(textOutputBuffer);
    textOutput.setTypedText(touchgfx::TypedText(T_SINGLEUSEID52));
    textOutputScrollableContainer.add(textOutput);
    textOutputScrollableContainer.setScrollbarsPermanentlyVisible();

    navigationMenu1.setXY(0, 0);

    add(__background);
    add(backgroundTiledImage);
    add(tiledImage1);
    add(stopTestingButton);
    add(pauseTestingButton);
    add(runTestingButton);
    add(textOutputScrollableContainer);
    add(navigationMenu1);
}

void TestingScreenViewBase::setupScreen()
{
    navigationMenu1.initialize();
}

void TestingScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &stopTestingButton)
    {
        //Interaction3
        //When stopTestingButton clicked call virtual function
        //Call stopTesting
        stopTesting();
    }
    else if (&src == &pauseTestingButton)
    {
        //Interaction2
        //When pauseTestingButton clicked call virtual function
        //Call pauseTesting
        pauseTesting();
    }
    else if (&src == &runTestingButton)
    {
        //Interaction1
        //When runTestingButton clicked call virtual function
        //Call startTesting
        startTesting();
    }
}
