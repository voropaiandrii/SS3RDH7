/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINSCREENVIEWBASE_HPP
#define MAINSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndOverwrite.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/containers/progress_indicators/TextProgress.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <gui/containers/NavigationMenu.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class MainScreenViewBase : public touchgfx::View<MainScreenPresenter>
{
public:
    MainScreenViewBase();
    virtual ~MainScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void makeScreenshot()
    {
        // Override and implement this function in MainScreen
    }

    virtual void startRecording()
    {
        // Override and implement this function in MainScreen
    }

    virtual void stopRecording()
    {
        // Override and implement this function in MainScreen
    }

    virtual void connectDevices()
    {
        // Override and implement this function in MainScreen
    }

    virtual void disconnectDevices()
    {
        // Override and implement this function in MainScreen
    }

    virtual void cleanGraphs()
    {
        // Override and implement this function in MainScreen
    }

    virtual void standartECGGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void earECGGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void fingerPPGGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void fingerPPGIRGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void leftEarPPGGreenGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void leftEarPPGRedGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void leftEarPPGIRGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void rightEarPPGGreenGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void rightEarPPGRedGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void rightEarPPGIRGraphClicked(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in MainScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage MainBackgroundTiledImage1;
    touchgfx::GraphWrapAndOverwrite<100> standardECGGraph;
    touchgfx::GraphElementLine standardECGGraphLine1;
    touchgfx::PainterRGB888 standardECGGraphLine1Painter;
    touchgfx::GraphElementGridY standardECGGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> earECGGraph;
    touchgfx::GraphElementLine earECGGraphLine1;
    touchgfx::PainterRGB888 earECGGraphLine1Painter;
    touchgfx::GraphElementGridY earECGGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> leftEarPPGGreenGraph;
    touchgfx::GraphElementLine leftEarPPGGreenGraphLine1;
    touchgfx::PainterRGB888 leftEarPPGGreenGraphLine1Painter;
    touchgfx::GraphElementGridY leftEarPPGGreenGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> leftEarPPGRedGraph;
    touchgfx::GraphElementLine leftEarPPGRedGraphLine1;
    touchgfx::PainterRGB888 leftEarPPGRedGraphLine1Painter;
    touchgfx::GraphElementGridY leftEarPPGRedGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> leftEarPPGIRGraph;
    touchgfx::GraphElementLine leftEarPPGIRGraphLine1;
    touchgfx::PainterRGB888 leftEarPPGIRGraphLine1Painter;
    touchgfx::GraphElementGridY leftEarPPGIRGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> rightEarPPGIRGraph;
    touchgfx::GraphElementLine rightEarPPGIRGraphLine1;
    touchgfx::PainterRGB888 rightEarPPGIRGraphLine1Painter;
    touchgfx::GraphElementGridY rightEarPPGIRGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> rightEarPPGRedGraph;
    touchgfx::GraphElementLine rightEarPPGRedGraphLine1;
    touchgfx::PainterRGB888 rightEarPPGRedGraphLine1Painter;
    touchgfx::GraphElementGridY rightEarPPGRedGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> rightEarPPGGreenGraph;
    touchgfx::GraphElementLine rightEarPPGGreenGraphLine1;
    touchgfx::PainterRGB888 rightEarPPGGreenGraphLine1Painter;
    touchgfx::GraphElementGridY rightEarPPGGreenGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> fingerPPGIRGraph;
    touchgfx::GraphElementLine fingerPPGIRGraphLine1;
    touchgfx::PainterRGB888 fingerPPGIRGraphLine1Painter;
    touchgfx::GraphElementGridY fingerPPGIRGraphMajorYAxisGrid;
    touchgfx::GraphWrapAndOverwrite<100> fingerPPGRedGraph;
    touchgfx::GraphElementLine fingerPPGRedGraphLine1;
    touchgfx::PainterRGB888 fingerPPGRedGraphLine1Painter;
    touchgfx::GraphElementGridY fingerPPGRedGraphMajorYAxisGrid;
    touchgfx::DigitalClock realTimeDigitalClock;
    touchgfx::TextProgress cpuUsageTextProgress;
    touchgfx::DigitalClock recordingDigitalClock;
    touchgfx::ButtonWithIcon cleanButton;
    touchgfx::ButtonWithIcon disconnectDevicesButton;
    touchgfx::ButtonWithIcon connectDevicesButton;
    touchgfx::ButtonWithIcon stopRecordingButton;
    touchgfx::ButtonWithIcon startRecordingButton;
    touchgfx::ButtonWithIcon makeScreenshotButton;
    NavigationMenu navigationMenu1;
    touchgfx::TextAreaWithOneWildcard errorTextArea;

    /*
     * Wildcard Buffers
     */
    static const uint16_t ERRORTEXTAREA_SIZE = 25;
    touchgfx::Unicode::UnicodeChar errorTextAreaBuffer[ERRORTEXTAREA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MainScreenViewBase, const touchgfx::AbstractDataGraph&, const touchgfx::AbstractDataGraph::GraphClickEvent&> graphClickedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MAINSCREENVIEWBASE_HPP
